Great! Letâ€™s now dive into **Control Structures in C Programming**, which determine the flow of a program.

---

## ðŸ”° What are Control Structures?

Control structures are **programming constructs** that control the order in which instructions are executed. In C, they are grouped into three main types:

---

## 1. **Sequential Control Structure**

This is the default execution where instructions are executed **line by line** in the order they appear.

### ðŸ§¾ Example:
```c
#include <stdio.h>

int main() {
    printf("Start Program\n");
    printf("Process Data\n");
    printf("End Program\n");
    return 0;
}
```

---

## 2. **Selection (Decision-Making) Control Structures**

Used to **make choices** between different paths in a program.

### ðŸ”¹ a. `if` Statement
```c
if (marks > 50) {
    printf("Pass\n");
}
```

### ðŸ”¹ b. `if...else` Statement
```c
if (marks >= 50) {
    printf("Pass\n");
} else {
    printf("Fail\n");
}
```

### ðŸ”¹ c. `else if` Ladder
```c
if (marks >= 80) {
    printf("Grade A\n");
} else if (marks >= 60) {
    printf("Grade B\n");
} else {
    printf("Grade C or below\n");
}
```

### ðŸ”¹ d. `switch` Statement
```c
int choice;
scanf("%d", &choice);
switch(choice) {
    case 1: printf("Option 1\n"); break;
    case 2: printf("Option 2\n"); break;
    default: printf("Invalid Option\n");
}
```

---

## 3. **Repetition (Looping) Control Structures**

Used to **repeat** a block of code multiple times.

### ðŸ”¹ a. `for` Loop (when number of iterations is known)
```c
for (int i = 1; i <= 5; i++) {
    printf("Count: %d\n", i);
}
```

### ðŸ”¹ b. `while` Loop (when condition is checked before executing)
```c
int i = 1;
while (i <= 5) {
    printf("Count: %d\n", i);
    i++;
}
```

### ðŸ”¹ c. `do...while` Loop (executes at least once)
```c
int i = 1;
do {
    printf("Count: %d\n", i);
    i++;
} while (i <= 5);
```

---

## 4. **Jump Control Statements**

These alter the normal sequence of flow.

### ðŸ”¹ `break` â€“ exits loop or switch
```c
for (int i = 0; i < 10; i++) {
    if (i == 5) break;
    printf("%d ", i);
}
```

### ðŸ”¹ `continue` â€“ skips current iteration
```c
for (int i = 0; i < 5; i++) {
    if (i == 2) continue;
    printf("%d ", i);
}
```

### ðŸ”¹ `goto` â€“ jumps to a labeled statement (use sparingly)
```c
goto skip;
printf("This will not print\n");
skip:
printf("Jumped here!\n");
```

---

## ðŸ“¦ Summary Table

| Control Type | Structure | Use Case |
|--------------|-----------|----------|
| Sequential | Normal execution | Line-by-line |
| Selection | if, else, switch | Decision making |
| Repetition | for, while, do...while | Looping |
| Jump | break, continue, goto | Alter flow |

